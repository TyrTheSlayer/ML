library(LSLR)
library(lslr)
library(MASS, lib.loc = "/usr/lib/R/library")
library(lslr)
library(LSLR)
install.packages('ISLR')
library('ISLR')
library(ISLR)
library('ISLR')
install.packages('ISLR')
library('ISLR')
OJ
orangeJuice <- OJ
View(orangeJuice)
train = sample(1:nrow(orangeJuice), 800)
View(orangeJuice)
test = orangeJuice[-train,]
train = orangeJuice[train,]
-0.848+(1.545*.1)-(1.942*0.75)+(1.973*(0.1^2))+(2.495*(0.75^2))+(0.104*(0.1^3))+(0.095*(0.75^3))+(2.009*0.1*0.75)
-0.848+(1.545*.1)-(1.942*0.75)+(1.973*(0.1^2))+(2.495*(0.75^2))+(0.104*(0.1^3))+(0.095*(0.75^3))+(2.009*0.1*0.75)
dose1 = 0.5
dose2 = 0.75
-0.848+(1.545*does1)-(1.942*does2)+(1.973*(does1^2))+(2.495*(does2^2))+(0.104*(does1^3))+(0.095*(does2^3))+(2.009*does1*does2)
does1 = 0.5
does2 = 0.75
-0.848+(1.545*does1)-(1.942*does2)+(1.973*(does1^2))+(2.495*(does2^2))+(0.104*(does1^3))+(0.095*(does2^3))+(2.009*does1*does2)
1 / (1 + exp(-1.171141))
-0.848 +(1.545*does1) - (1.942 * does2) + (1.973 * does1^2) + (2.495 * does2^2) + (0.104 * ooes1^3) + (0.095 * does2^3) + (3.009*does1*does2)
-0.848 +(1.545*does1) - (1.942 * does2) + (1.973 * does1^2) + (2.495 * does2^2) + (0.104 * does1^3) + (0.095 * does2^3) + (3.009*does1*does2)
1/(1+exp(1.546141))
1/(1+exp(-1.546141))
does1=0.10
-0.848 +(1.545*does1) - (1.942 * does2) + (1.973 * does1^2) + (2.495 * does2^2) + (0.104 * does1^3) + (0.095 * does2^3) + (3.009*does1*does2)
1/(1+exp(0.4609754))
does1 = -0.47
does2 = -0.39
-0.848 +(1.545*does1) - (1.942 * does2) + (1.973 * does1^2) + (2.495 * does2^2) + (0.104 * does1^3) + (0.095 * does2^3) + (3.009*does1*does2)
1/(1+exp(-0.533672))
does2 = 0.18
-0.848 +(1.545*does1) - (1.942 * does2) + (1.973 * does1^2) + (2.495 * does2^2) + (0.104 * does1^3) + (0.095 * does2^3) + (3.009*does1*does2)
1/(1+exp(1.671841))
setwd("~/sml/hw4/")
library(e1071)
soil <- read.csv('Soil_types.csv') # soils dataset from Kanevsky
soil$Class <- factor(soil$Type)
# this is important, otherwise "SVM" will do regression
x <- soil[,1]
y <- soil[,2]
kolors <- topo.colors(5) # c("red", "blue", "magenta", "green", "grey")
plot(x,y, col="white")
for (i in 1:5){
subs <- (soil$Type == i)
points(x[subs], y[subs], col= kolors[i], pch=16)
}
soil.svm <- svm(Class ~ x + y, data = soil, kernel = "linear")
# this will do linear SVM
soil.svm <- svm(Class ~ x + y, data = soil, kernel = "radial", cost = 100, gamma = 50)
plot(soil.svm, soil, grid=200, color.palette = terrain.colors, y ~ x)
tune.soil <- tune(svm, Class ~ x + y, data = soil, kernel = "radial",
ranges = list(cost = c(0.1, 1, 10, 100, 200), gamma = c(0.1, 1, 10,50,100)) )
# this is time-consuming
summary(tune.soil)
plot(x,y, col="white")
for (i in 1:5){
subs <- (soil$Type == i)
points(x[subs], y[subs], col= kolors[i], pch=16)
}
# this will do linear SVM
soil.svm <- svm(Class ~ x + y, data = soil, kernel = "radial", cost = 100, gamma = 50)
plot(soil.svm, soil, grid=200, color.palette = terrain.colors, y ~ x)
#first set of cost and gamma
soil.svm <- svm(Class ~ x + y, data = soil, kernel = "radial", cost = 100, gamma = 0)
plot(soil.svm, soil, grid=200, color.palette = terrain.colors, y ~ x)
#setup variables
soil <- read.csv('Soil_types.csv') # soils dataset from Kanevsky
soil$Class <- factor(soil$Type)
# this is important, otherwise "SVM" will do regression
x <- soil[,1]
y <- soil[,2]
kolors <- topo.colors(5) # c("red", "blue", "magenta", "green", "grey")
#first set of cost and gamma
soil.svm <- svm(Class ~ x + y, data = soil, kernel = "radial", cost = 100, gamma = 0)
plot(soil.svm, soil, grid=200, color.palette = terrain.colors, y ~ x)
#first set of cost and gamma
soil.svm <- svm(Class ~ x + y, data = soil, kernel = "radial", cost = 100, gamma = 100)
plot(soil.svm, soil, grid=200, color.palette = terrain.colors, y ~ x)
#cost low gamma low
soil.svm <- svm(Class ~ x + y, data = soil, kernel = "radial", cost = 0, gamma = 0)
#cost low gamma low
soil.svm <- svm(Class ~ x + y, data = soil, kernel = "radial", cost = 1, gamma = 0.1)
plot(soil.svm, soil, grid=200, color.palette = terrain.colors, y ~ x)
#cost low gamma low
soil.svm <- svm(Class ~ x + y, data = soil, kernel = "radial", cost = 1, gamma = 0.1)
plot(soil.svm, soil, grid=200, color.palette = terrain.colors, y ~ x, main = "Cost Low Gamma Low")
plot(soil.svm, soil, main = "Cost Low Gamma Low", grid=200, color.palette = terrain.colors, y ~ x)
#setup variables
soil <- read.csv('Soil_types.csv') # soils dataset from Kanevsky
soil$Class <- factor(soil$Type)
# this is important, otherwise "SVM" will do regression
x <- soil[,1]
y <- soil[,2]
kolors <- topo.colors(5) # c("red", "blue", "magenta", "green", "grey")
#cost low gamma low
soil.svm <- svm(Class ~ x + y, data = soil, kernel = "radial", cost = 1, gamma = 0.1)
plot(soil.svm, soil, grid=200, color.palette = terrain.colors, y ~ x)
#cost high gamma low
soil.svm <- svm(Class ~ x + y, data = soil, kernel = "radial", cost = 100, gamma = 0.1)
plot(soil.svm, soil, grid=200, color.palette = terrain.colors, y ~ x)
#cost low gamma high
soil.svm <- svm(Class ~ x + y, data = soil, kernel = "radial", cost = 1, gamma = 10)
plot(soil.svm, soil, grid=200, color.palette = terrain.colors, y ~ x)
#cost high gamma high
soil.svm <- svm(Class ~ x + y, data = soil, kernel = "radial", cost = 100, gamma = 10)
plot(soil.svm, soil, grid=200, color.palette = terrain.colors, y ~ x)
#tuning
tune.soil <- tune(svm, Class ~ x + y, data = soil, kernel = "radial",
ranges = list(cost = c(0.1, 1, 10, 100, 200), gamma = c(0.1, 1, 10,50,100)) )
# this is time-consuming
summary(tune.soil)
#problem 2a
X = read.csv("mMeanCO.csv")
logX = log(as.matrix(X[,2:23])+0.1)
View(X)
View(logX)
View(X)
#problem 2b
pca1 = princomp(logX, cor=TRUE)
lds = pca1$loadings
plot(lds[,2], lds[,1])
plot(lds[,1], lds[,2])
plot(lds[,2], lds[,1])
plot(sc[,2], type="h")
plot(lds[,2], type="h")
#problem 2b
pca1 = princomp(logX, cor=TRUE)
lds = pca1$loadings
plot(lds[,2], lds[,1])
plot(lds[,1], lds[,2])
biplot(pca1)
plot(lds[,2], lds[,3])
#Aedan Wells and Samuel nix
#SML and ML
setwd("~/ML/project/")
data = read.csv("Weather.csv")
View(data)
plot(data$tempi, data$hum)
colnames(data)
plot(data$dewpti, data$hum)
plot(data$tempm, data$hum)
plot(data$tempm, data$precipi)
pairs(data)
h1 <-  heatmap(data, distfun = dist, keep.dendro = T)
data2 = data[,c("pickup_datetime", "tempm", "dewptm", "hum", "wspdm", "vism", "pressurem", "windchillm", "precipm")]
h1 <-  heatmap(data2, distfun = dist, keep.dendro = T)
h1 <-  heatmap(scale(data2), distfun = dist, keep.dendro = T)
X = scale(data2)
data2 = data[,c("pickup_datetime", "tempm", "dewptm", "hum", "wspdm", "vism", "pressurem", "windchillm", "precipm")]
X = scale(data2)
data2[is.na(data2)] <- 0
X = scale(data2)
data2 = data[,c("tempm", "dewptm", "hum", "wspdm", "vism", "pressurem", "windchillm", "precipm")]
data2[is.na(data2)] <- 0
X = scale(data2)
h1 <-  heatmap(scale(data2), distfun = dist, keep.dendro = T)
dev.off()
h1 <-  heatmap(scale(data2), distfun = dist, keep.dendro = T)
